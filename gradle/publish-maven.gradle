apply plugin: 'signing'
apply plugin: 'maven-publish'

def publishProperty(String key) {
  def profile = findProperty('publish-profile')
  if (profile == null) {
    return null
  }
  return findProperty("publish.${profile}.${key}")
}

tasks.register('install') {
  dependsOn publishToMavenLocal
  group = 'Publishing'
  description = 'Installs artifacts to local Maven repository'
}

// Disabling Gradle Module Metadata publication
//   see: https://docs.gradle.org/8.0/userguide/publishing_gradle_module_metadata.html#sub:disabling-gmm-publication
tasks.withType(GenerateModuleMetadata).configureEach {
  enabled = false
}

// Disabling gradle pluginMaven publication
tasks.withType(AbstractPublishToMaven).configureEach {
  onlyIf {
    publication.name != 'pluginMaven'
  }
}

signing {
  required {
    publishProperty('sign') == 'true'
  }
  sign publishing.publications
}

publishing {
  repositories {
    maven {
      allowInsecureProtocol = 'true' == publishProperty('allowInsecureProtocol')
      url = publishProperty('url')
      if (!url) {
        url = version.endsWith('-SNAPSHOT')
            ? publishProperty('snapshotsUrl')
            : publishProperty('releasesUrl')
      }

      def authHeaderToken = publishProperty('auth-header-token')
      if (authHeaderToken) {
        authentication {
          header(HttpHeaderAuthentication)
        }
        credentials(HttpHeaderCredentials) {
          name = publishProperty('auth-header') ?: 'Authorization'
          value = authHeaderToken
        }
      }

      def pass = publishProperty('password')
      if (pass) {
        credentials {
          username publishProperty('user') as String
          password pass as String
        }
      }
    }
  }

  publications {
    mavenLib(MavenPublication) {
      from components.java
    }
  }
  afterEvaluate {
    publications.withType(MavenPublication).configureEach {

      // Version Mapping:
      // -- See: https://docs.gradle.org/current/userguide/publishing_maven.html#ex-using-resolved-versions
      if (configurations.names.contains('runtimeClasspath')) {
        versionMapping {
          usage('java-api') {
            fromResolutionOf('runtimeClasspath')
          }
          usage('java-runtime') {
            fromResolutionOf('runtimeClasspath')
          }
        }
      }

      customPom(pom)
    }
  }
}


def customPom(MavenPom pom) {

  pom.with {

    name = project.ext.moduleName
    description = project.ext.moduleDescription
    url = 'https://github.com/febit/febit-devkit-gradle'
    organization {
      name = 'Febit'
      url = 'https://github.com/febit'
    }
    licenses {
      license {
        name = 'Apache License, Version 2.0'
        url = 'https://github.com/febit/febit-devkit-gradle/blob/master/LICENSE.txt'
        distribution = 'repo'
      }
    }
    scm {
      url = 'https://github.com/febit/febit-devkit-gradle'
      connection = 'scm:git:https://github.com/febit/febit-devkit-gradle.git'
      developerConnection = 'scm:git:https://github.com/febit/febit-devkit-gradle.git'
    }
    issueManagement {
      system = 'GitHub'
      url = 'https://github.com/febit/febit-devkit-gradle/issues'
    }
    developers {
      developer {
        id = 'zqq'
        name = 'Zhu Qingqing'
        email = 'zqq@febit.org'
        timezone = '+8'
      }
    }
  }
}
