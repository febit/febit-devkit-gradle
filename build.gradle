import java.time.Instant

plugins {
  id 'io.freefair.lombok' version '8.3'
  id 'com.github.hierynomus.license' version '0.16.1'
  id 'io.spring.dependency-management' version '1.1.3'
}

group 'org.febit.devkit.gradle'
version '1.1.0'

ext {
  versions = [
      commonsIo                 : '2.13.0',
      commonsCollections4       : '4.4',
      spotbugs                  : '4.7.3',
      springBoot                : '2.7.15',
      jsr305                    : '3.0.2',
      assertj                   : '3.24.2',
      lombokPlugin              : '8.3',
      dependencyManagementPlugin: '1.1.3',
  ]
}

allprojects {
  apply plugin: 'com.github.hierynomus.license'

  group rootProject.group
  version rootProject.version

  license {
    mapping {
      java = 'SLASHSTAR_STYLE'
    }
    include '**/*.java'
    strictCheck false
    skipExistingHeaders false
    header rootProject.file('etc/license-header.txt')
  }

  repositories {
    maven { url "https://repo.huaweicloud.com/repository/maven/" }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
  }
}

def javaLibModules() {
  subprojects.findAll {
    !it.name.endsWith('-bom')
  }
}

configure(javaLibModules()) {
  apply plugin: 'java-library'
  apply plugin: 'io.freefair.lombok'
  apply plugin: 'io.spring.dependency-management'

  apply from: "${rootDir}/gradle/publish-maven.gradle"

  java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    withJavadocJar()
    withSourcesJar()
  }

  tasks.withType(Test).configureEach {
    testLogging.events = ["FAILED", "PASSED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"]
  }

  tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.debug = true
    options.compilerArgs << "-Xlint:unchecked"
    options.compilerArgs << "-Xlint:deprecation"
  }

  tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
  }

  tasks.withType(Jar).configureEach {
    manifest {
      attributes([
          "Build-Jdk"               : System.getProperty("java.version"),
          "Build-Jdk-Spec"          : java.targetCompatibility.toString(),
          "Build-Time"              : Instant.ofEpochSecond(System.currentTimeMillis() / 1000 as long).toString(),
          "Created-By"              : "Gradle " + project.getGradle().getGradleVersion(),
          "Implementation-Title"    : project.getName(),
          "Implementation-Vendor-Id": project.getGroup().toString(),
          "Implementation-Version"  : project.getVersion().toString()
      ])
    }
  }

  test {
    useJUnitPlatform()
  }

  dependencies {
    compileOnly 'com.google.code.findbugs:jsr305'
    compileOnly 'com.github.spotbugs:spotbugs-annotations'

    testImplementation 'org.slf4j:slf4j-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  }

  dependencyManagement {
    generatedPomCustomization {
      enabled = false
    }
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:${versions.springBoot}"
    }
    dependencies {
      dependency "com.google.code.findbugs:jsr305:${versions.jsr305}"
      dependency "org.apache.commons:commons-collections4:${versions.commonsCollections4}"
      dependency "commons-io:commons-io:${versions.commonsIo}"
      dependency "org.assertj:assertj-core:${versions.assertj}"

      dependency "io.freefair.gradle:lombok-plugin:${versions.lombokPlugin}"
      dependency "com.github.spotbugs:spotbugs-annotations:${versions.spotbugs}"
      dependency "io.spring.gradle:dependency-management-plugin:${versions.dependencyManagementPlugin}"
    }

    resolutionStrategy {
      cacheChangingModulesFor 0, 'seconds'
    }
  }
}
