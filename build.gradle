import java.time.Instant

plugins {
  alias libs.plugins.lombok
  alias libs.plugins.license
}

group = 'org.febit.devkit.gradle'
version = '1.4.2-SNAPSHOT'

ext {
}

allprojects {
  apply plugin: 'com.github.hierynomus.license'

  group = rootProject.group
  version = rootProject.version

  license {
    mapping {
      java = 'SLASHSTAR_STYLE'
    }
    include '**/*.java'
    strictCheck = false
    skipExistingHeaders = false
    header = rootProject.file('etc/license-header.txt')
  }

  repositories {
    maven { url = "https://repo.huaweicloud.com/repository/maven/" }
    maven { url = 'https://maven.aliyun.com/repository/gradle-plugin' }
    mavenCentral()
  }
}

def javaLibModules() {
  subprojects.findAll {
    !it.name.endsWith('-bom')
  }
}

configure(javaLibModules()) {
  apply plugin: 'java-library'
  apply plugin: 'io.freefair.lombok'

  apply from: "${rootDir}/gradle/publish-maven.gradle"

  java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    withJavadocJar()
    withSourcesJar()
  }

  tasks.withType(Test).configureEach {
    testLogging.events = ["FAILED", "PASSED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"]
  }

  tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.debug = true
    options.compilerArgs << "-Xlint:unchecked"
    options.compilerArgs << "-Xlint:deprecation"
  }

  tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
  }

  tasks.withType(Jar).configureEach {
    manifest {
      attributes([
          "Build-Jdk"               : System.getProperty("java.version"),
          "Build-Jdk-Spec"          : java.targetCompatibility.toString(),
          "Build-Time"              : Instant.ofEpochSecond(System.currentTimeMillis() / 1000 as long).toString(),
          "Created-By"              : "Gradle " + project.getGradle().getGradleVersion(),
          "Implementation-Title"    : project.getName(),
          "Implementation-Vendor-Id": project.getGroup().toString(),
          "Implementation-Version"  : project.getVersion().toString()
      ])
    }
  }

  test {
    useJUnitPlatform()
  }

  dependencies {
    compileOnly libs.jsr305
    compileOnly libs.spotbugs.annotations

    testImplementation libs.slf4j.api
    testImplementation libs.jupiter.api
    testImplementation libs.mockito.junit.jupiter
    testRuntimeOnly libs.jupiter.engine
    testRuntimeOnly libs.junit.platform.launcher
  }
}
